// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

namespace org.apache.arrow.ir.flatbuf;

import "Schema.fbs";
import "IRFunctionExpression.fbs";

table ArrayLiteral {
  values: [RexLiteral];
}

table StructLiteral {
  values: [KeyValue];
}

table KeyValue {
  key: string;
  value: RexLiteral;
}

table MapLiteral {
  values: [KeyValue]; 
}

table I8Literal {
  value: int8;
}

table I16Literal {
  value: int16;
}

table I32Literal {
  value: int32;
}

table I64Literal {
  value: int64;
}

table U8Literal {
  value: int8;
}

table U8Literal {
  value: uint8;
}

table U16Literal {
  value: uint16;
}

table U32Literal {
  value: uint32;
}

table U64Literal {
  value: uint64;
}

table HalfFloatLiteral {
  value: uint16;
}

table FloatLiteral {
  value: float32;
}

table DoubleLiteral {
  value: float64;
}

table DecimalLiteral {
  value: [uint8]; // 128 bit value.
  scale: uint8;
  precision: uint8;
}

table BooleanLiteral {
  value: bool;
}

table DateLiteral {
  // milliseconds since epoch
  value: int64;
}

table TimeLiteral {
  // nanosecond time value.
  value: int64; 
}

table Timestamp {
  //microsecond timestamp.
  value: int64;
  
  // timezone value, same definition as used in Schema.fbs.
  timezone: string;
}

table BinaryLiteral {
  value: [byte];
}

table StringLiteral {
  value: string;
}

// no union literal is defined as only one branch of a union can be resolved.
// no literals for large string/binary types as flatbuffer is limited to 2gb.

union RexLiteral {
  BooleanLiteral, 
  I8Literal, I16Literal, I32Literal, I64Literal, 
  U8Literal, U16Literal, U32Literal, U64Literal,
  DateLiteral, TimeLiteral, TimestampLiteral,
  DecimalLiteral,
  HalfFloatLiteral, FloatLiteral, DoubleLiteral, 
  ArrayLiteral, StructLiteral, MapLiteral, 
  StringLiteral, BinaryLiteral}

root_type RexLiteral;